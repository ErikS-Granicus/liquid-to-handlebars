<!-- /templates/product.liquid -->
{{#comment}}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{{/comment}}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{img_url product.featured_image.src 'grande'}}">

  {{#comment}}
    Get first variant, or deep linked one
  {{/comment}}
  {{assign 'current_variant' product.selected_or_first_available_variant}}

  {{include 'breadcrumb'}}

  <div class="grid product-single">
    <div class="grid__item large--one-half text-center">
      <div class="product-single__photos" id="ProductPhoto">
        {{assign 'featured_image' (default current_variant.featured_image product.featured_image)}}
        <img src="{{img_url featured_image 'large'}}" alt="{{escape featured_image.alt}}" id="ProductPhotoImg">
      </div>

      {{#comment}}
        Create thumbnails if we have more than one product image
      {{/comment}}
      {{#if (gt product.images.size 1)}}
        <ul class="product-single__thumbnails grid-uniform" id="ProductThumbs">

          {{#each product.images as |image|}}
            <li class="grid__item one-quarter">
              <a href="{{img_url image.src 'large'}}" class="product-single__thumbnail">
                <img src="{{img_url image.src 'compact'}}" alt="{{escape image.alt}}">
              </a>
            </li>
          {{/each}}

        </ul>
      {{/if}}
    </div>

    <div class="grid__item large--one-half">

      <h1 itemprop="name">{{ product.title }}</h1>

      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        <link itemprop="availability" href="http://schema.org/{{#if product.available}}InStock{{else}}OutOfStock{{/if}}">

        {{#comment}}
          ID addToCartForm is a selector for the ajax cart plugin
        {{/comment}}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical">

          {{#comment}}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
          {{/comment}}
          <select name="id" id="productSelect" class="product-single__variants">
            {{#each product.variants as |variant|}}
              {{#if variant.available}}

                {{#comment}}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                {{/comment}}
                <option {{#if (is variant product.selected_or_first_available_variant)}} selected="selected" {{/if}} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{money_with_currency variant.price}}</option>

              {{else}}
                <option disabled="disabled">
                  {{ variant.title }} - {{t 'products.product.sold_out'}}
                </option>
              {{/if}}
            {{/each}}
          </select>

          <span class="visually-hidden">{{t 'products.general.regular_price'}}</span>
          <span id="ProductPrice" class="h2" itemprop="price" content="{{divided_by current_variant.price 100.00}}">
            {{money current_variant.price}}
          </span>

          {{#if (gt product.compare_at_price_max product.price)}}
            <span class="visually-hidden">{{t 'products.general.sale_price'}}</span>
            <p id="ComparePrice">
              {{t 'products.product.compare_at'}} {{money current_variant.compare_at_price}}
            </p>
          {{/if}}

          <label for="Quantity" class="quantity-selector">{{t 'products.product.quantity'}}</label>
          <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">

          <button type="submit" name="add" id="AddToCart" class="btn">
            <span id="AddToCartText">{{t 'products.product.add_to_cart'}}</span>
          </button>
        </form>

      </div>

      <div class="product-description rte" itemprop="description">
        {{ product.description }}
      </div>

      {{#comment}}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.
      {{/comment}}
      {{#if collection}}
        {{#if (or collection.previous_product collection.next_product)}}
          <p>
            {{#if collection.previous_product}}
              <span class="left">
                {{link_to (t 'products.general.previous_product_html') collection.previous_product}}
              </span>
            {{/if}}
            {{#if collection.next_product}}
              <span class="right">
                {{link_to (t 'products.general.next_product_html') collection.next_product}}
              </span>
            {{/if}}
          </p>
        {{/if}}
      {{/if}}

    </div>
  </div>

</div>

{{#comment}}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{{/comment}}
{{script_tag (shopify_asset_url 'option_selection.js')}}
<script>
  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{json product}},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {{#if (and (is product.options.size 1) (isnt product.options.first 'Title'))}}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{escape product.options.first}}</label>');
    {{/if}}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {{#if (and (is product.variants.size 1) (contains product.variants.first.title 'Default'))}}
      $('.selector-wrapper').hide();
    {{/if}}
  });
</script>
